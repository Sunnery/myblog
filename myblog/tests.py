#coding=utf-8
from qiniu import Auth, put_file, etag
import base64

def qiniuUpload():
  # 需要填写你的 Access Key 和 Secret Key
  access_key = "6Ct_gOzm6X2bo_LQchKhOKMkSMhYmajFJiuPh5oc"
  secret_key = "sbQMnyz96cQnh97uRaTkSqOQj022F0EX8hhuo-n-"

  # 构建鉴权对象
  q = Auth(access_key, secret_key)

  # 要上传的空间
  bucket_name = 'publicpicture'

  # 上传到七牛后保存的文件名
  key = 'test.jpg';

  # 生成上传 Token，可以指定过期时间等
  token = q.upload_token(bucket_name, key, 3600)

  # 要上传文件的本地路径
  localfile = 'test.jpg'

  ret, info = put_file(token, key, localfile)
  print(info)
  assert ret['key'] == key
  assert ret['hash'] == etag(localfile)

def img():
  imgData = b''
  with open("imageToSave.png", "wb") as fh:
    fh.write(base64.decodestring(imgData))
    print fh

if __name__ == "__main__":
  import hashlib
  m2 = hashlib.md5()
  m2.update('asdsad')
  print m2.hexdigest()